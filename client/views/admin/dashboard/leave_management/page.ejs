<div class="flex h-auto overflow-scroll w-full bg-gray-100 dark:bg-gray-700 pb-8">
    <main class="flex-1 overflow-hidden">
        <header class="flex items-center justify-between p-4 bg-white shadow">
            <h1 class="text-xl font-semibold">Leave Requests</h1>
            <div class="leave-request-count text-gray-500">Leave Requests (<span id="unread-count" class="unread-count">0</span>)</div>
        </header>
        
        <div class="p-4 h-full overflow-auto">
            <div class="relative w-full overflow-auto">
                <table class="w-full caption-bottom text-sm">
                    <thead>
                        <tr class="border-b">
                            <th class="h-12 px-4 text-left align-middle font-medium">
                                Student Name
                            </th>
                            <th class="h-12 px-4 text-left align-middle font-medium">
                                Leave Type
                            </th>
                            <th class="h-12 px-4 text-left align-middle font-medium">
                                Roll Number
                            </th>
                            <th class="h-12 px-4 text-left align-middle font-medium">
                                From
                            </th>
                            <th class="h-12 px-4 text-left align-middle font-medium">
                                To
                            </th>
                            <th class="h-12 px-4 text-left align-middle font-medium">
                                Amount
                            </th>   
                            <th class="h-12 px-4 text-left align-middle font-medium"></th>
                        </tr>
                    </thead>
                    <tbody id="inbox-table-body" class="[&amp;_tr:last-child]:border-0 ">
                        <!-- Table body will be dynamically populated here -->
                    </tbody>
                </table>
            </div>
        </div>
    </main>
</div>

<!-- Modal -->
<div id="modal-bg" class="fixed top-0 left-0 w-full h-full bg-black opacity-50 z-40 hidden"></div>
<div id="modal" class="fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-white p-8 rounded shadow-lg z-50 hidden">
    <h2 class="text-xl font-semibold mb-4">Application Details</h2>
    <div id="modal-content"></div>
    <button id="close-modal" class="mt-4 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">Close</button>
</div>

<script>
    // code  for dynamically generating the inbox table for admin based on the data
    const inboxData = [
        {
            "studentName": "Bessie Cooper",
            "leaveType": "Sick Leave",
            "rollNumber": "S0203010230",
            "from": "Mar 20, 2024 23:13",
            "to": "Mar 22, 2024 23:13",
            "amount": "2 Days",
            "id": "request1"
        },
        {
            "studentName": "Devon Lane",
            "leaveType": "Academic Leave",
            "rollNumber": "S0205001023",
            "from": "Mar 20, 2024 23:13",
            "to": "Mar 22, 2024 23:13",
            "amount": "2 Days",
            "id": "request2"
        },
        {
            "studentName": "Suvan Sarkar",
            "leaveType": "Sick Leave",
            "rollNumber": "S20203030153",
            "from": "Mar 20, 2024 23:13",
            "to": "Mar 22, 2024 23:13",
            "amount": "2 Days",
            "id": "request3"
        },
        {
            "studentName": "Bessie Cooper",
            "leaveType": "Sick Leave",
            "rollNumber": "S0203010230",
            "from": "Mar 20, 2024 23:13",
            "to": "Mar 22, 2024 23:13",
            "amount": "2 Days",
            "id": "request1"
        },
        {
            "studentName": "Devon Lane",
            "leaveType": "Academic Leave",
            "rollNumber": "S0205001023",
            "from": "Mar 20, 2024 23:13",
            "to": "Mar 22, 2024 23:13",
            "amount": "2 Days",
            "id": "request2"
        },
        {
            "studentName": "Suvan Sarkar",
            "leaveType": "Sick Leave",
            "rollNumber": "S20203030153",
            "from": "Mar 20, 2024 23:13",
            "to": "Mar 22, 2024 23:13",
            "amount": "2 Days",
            "id": "request3"
        },
        {
            "studentName": "Bessie Cooper",
            "leaveType": "Sick Leave",
            "rollNumber": "S0203010230",
            "from": "Mar 20, 2024 23:13",
            "to": "Mar 22, 2024 23:13",
            "amount": "2 Days",
            "id": "request1"
        },
        {
            "studentName": "Devon Lane",
            "leaveType": "Academic Leave",
            "rollNumber": "S0205001023",
            "from": "Mar 20, 2024 23:13",
            "to": "Mar 22, 2024 23:13",
            "amount": "2 Days",
            "id": "request2"
        },
        {
            "studentName": "Suvan Sarkar",
            "leaveType": "Sick Leave",
            "rollNumber": "S20203030153",
            "from": "Mar 20, 2024 23:13",
            "to": "Mar 22, 2024 23:13",
            "amount": "2 Days",
            "id": "request3"
        },
        {
            "studentName": "Bessie Cooper",
            "leaveType": "Sick Leave",
            "rollNumber": "S0203010230",
            "from": "Mar 20, 2024 23:13",
            "to": "Mar 22, 2024 23:13",
            "amount": "2 Days",
            "id": "request1"
        },
        {
            "studentName": "Devon Lane",
            "leaveType": "Academic Leave",
            "rollNumber": "S0205001023",
            "from": "Mar 20, 2024 23:13",
            "to": "Mar 22, 2024 23:13",
            "amount": "2 Days",
            "id": "request2"
        },
        {
            "studentName": "Suvan Sarkar",
            "leaveType": "Sick Leave",
            "rollNumber": "S20203030153",
            "from": "Mar 20, 2024 23:13",
            "to": "Mar 22, 2024 23:13",
            "amount": "2 Days",
            "id": "request3"
        },
        {
            "studentName": "Bessie Cooper",
            "leaveType": "Sick Leave",
            "rollNumber": "S0203010230",
            "from": "Mar 20, 2024 23:13",
            "to": "Mar 22, 2024 23:13",
            "amount": "2 Days",
            "id": "request1"
        },
        {
            "studentName": "Devon Lane",
            "leaveType": "Academic Leave",
            "rollNumber": "S0205001023",
            "from": "Mar 20, 2024 23:13",
            "to": "Mar 22, 2024 23:13",
            "amount": "2 Days",
            "id": "request2"
        },
        {
            "studentName": "Suvan Sarkar",
            "leaveType": "Sick Leave",
            "rollNumber": "S20203030153",
            "from": "Mar 20, 2024 23:13",
            "to": "Mar 22, 2024 23:13",
            "amount": "2 Days",
            "id": "request3"
        },
        {
            "studentName": "Bessie Cooper",
            "leaveType": "Sick Leave",
            "rollNumber": "S0203010230",
            "from": "Mar 20, 2024 23:13",
            "to": "Mar 22, 2024 23:13",
            "amount": "2 Days",
            "id": "request1"
        },
        {
            "studentName": "Devon Lane",
            "leaveType": "Academic Leave",
            "rollNumber": "S0205001023",
            "from": "Mar 20, 2024 23:13",
            "to": "Mar 22, 2024 23:13",
            "amount": "2 Days",
            "id": "request2"
        },
        {
            "studentName": "Suvan Sarkar",
            "leaveType": "Sick Leave",
            "rollNumber": "S20203030153",
            "from": "Mar 20, 2024 23:13",
            "to": "Mar 22, 2024 23:13",
            "amount": "2 Days",
            "id": "request3"
        },
        {
            "studentName": "Bessie Cooper",
            "leaveType": "Sick Leave",
            "rollNumber": "S0203010230",
            "from": "Mar 20, 2024 23:13",
            "to": "Mar 22, 2024 23:13",
            "amount": "2 Days",
            "id": "request1"
        },
        {
            "studentName": "Devon Lane",
            "leaveType": "Academic Leave",
            "rollNumber": "S0205001023",
            "from": "Mar 20, 2024 23:13",
            "to": "Mar 22, 2024 23:13",
            "amount": "2 Days",
            "id": "request2"
        },
        {
            "studentName": "Suvan Sarkar",
            "leaveType": "Sick Leave",
            "rollNumber": "S20203030153",
            "from": "Mar 20, 2024 23:13",
            "to": "Mar 22, 2024 23:13",
            "amount": "2 Days",
            "id": "request3"
        },
        {
            "studentName": "Bessie Cooper",
            "leaveType": "Sick Leave",
            "rollNumber": "S0203010230",
            "from": "Mar 20, 2024 23:13",
            "to": "Mar 22, 2024 23:13",
            "amount": "2 Days",
            "id": "request1"
        },
        {
            "studentName": "Devon Lane",
            "leaveType": "Academic Leave",
            "rollNumber": "S0205001023",
            "from": "Mar 20, 2024 23:13",
            "to": "Mar 22, 2024 23:13",
            "amount": "2 Days",
            "id": "request2"
        },
        {
            "studentName": "Suvan Sarkar",
            "leaveType": "Sick Leave",
            "rollNumber": "S20203030153",
            "from": "Mar 20, 2024 23:13",
            "to": "Mar 22, 2024 23:13",
            "amount": "2 Days",
            "id": "request3"
        },
        {
            "studentName": "Robert Fox",
            "leaveType": "Internship Leave",
            "rollNumber": "S0203010993",
            "from": "Mar 20, 2024 23:13",
            "to": "Mar 22, 2024 23:13",
            "amount": "2 Days",
            "id": "request4"
        }
        
    ];

    // Update the unread count dynamically
    document.getElementById('unread-count').textContent = inboxData.length;


    // Get reference to table body
    const tableBody = document.getElementById('inbox-table-body');

    // Iterate over the data and populate the table rows
    inboxData.forEach(item => {
        const row = document.createElement('tr');
        row.classList.add('border-b', 'hover:bg-muted/50', 'data-[state=selected]:bg-muted');
        row.setAttribute('data-approve-target', item.id); // Assuming you have an ID for each item

        // Populate table cells
        row.innerHTML = `
            <td class="p-4 align-middle">${item.studentName}</td>
            <td class="p-4 align-middle">${item.leaveType}</td>
            <td class="p-4 align-middle">${item.rollNumber}</td>
            <td class="p-4 align-middle">${item.from}</td>
            <td class="p-4 align-middle">${item.to}</td>
            <td class="p-4 align-middle">${item.amount}</td>
            <td class="p-4 align-middle">
                <a class="inline-block border border-white rounded hover:border-gray-200 text-blue-500 hover:bg-gray-200 py-2 px-4" href="#" data-modal-target="modal${item.id}">Show Details</a>
                <button class="bg-blue-500 hover:bg-blue-700 text-white font-bold ml-4 py-2 px-4 border border-blue-700 rounded">Approve</button>
                <button class="bg-red-500 hover:bg-red-700 text-white font-bold ml-4 py-2 px-4 border border-red-700 rounded">Reject</button>
</td>
            </td>
        `;
        tableBody.appendChild(row);
    });


    // Get reference to modal elements
    const modalBg = document.getElementById('modal-bg');
    const modal = document.getElementById('modal');
    const modalContent = document.getElementById('modal-content');
    const closeModal = document.getElementById('close-modal');

    // Show modal function
    function showModal(content) {
        modalContent.innerHTML = content;
        modalBg.classList.remove('hidden');
        modal.classList.remove('hidden');
    }

    // Hide modal function
    function hideModal() {
        modalBg.classList.add('hidden');
        modal.classList.add('hidden');
    }

// Add event listener to each Show Details button
const showDetailsButtons = document.querySelectorAll('[data-modal-target^="modal"]');
showDetailsButtons.forEach(button => {
    button.addEventListener('click', (event) => {
        event.preventDefault(); // Prevent default anchor tag behavior
        const targetModalId = event.target.getAttribute('data-modal-target');
        const id = targetModalId.replace('modal', ''); // Extract the ID from the modal target
        const item = inboxData.find(item => item.id === id);
        const detailsHtml = `
            <p><strong>Student Name:</strong> ${item.studentName}</p>
            <p><strong>Leave Type:</strong> ${item.leaveType}</p>
            <p><strong>Roll Number:</strong> ${item.rollNumber}</p>
            <p><strong>From:</strong> ${item.from}</p>
            <p><strong>To:</strong> ${item.to}</p>
            <p><strong>Amount:</strong> ${item.amount}</p>
        `;
        showModal(detailsHtml);
    });
});


    // Close modal when close button is clicked
    closeModal.addEventListener('click', hideModal);

    // Close modal when background is clicked
    modalBg.addEventListener('click', hideModal);

</script>